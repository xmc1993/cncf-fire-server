<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cncf.dao.BtcMapper" >
  <resultMap id="BaseResultMap" type="com.cncf.entity.Btc" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="btc_name" property="btcName" jdbcType="VARCHAR" />
    <result column="short_name" property="shortName" jdbcType="VARCHAR" />
    <result column="serial_number" property="serialNumber" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.cncf.entity.BtcWithBLOBs" extends="BaseResultMap" >
    <result column="btc_brief" property="btcBrief" jdbcType="LONGVARCHAR" />
    <result column="connection" property="connection" jdbcType="LONGVARCHAR" />
    <result column="cms" property="cms" jdbcType="LONGVARCHAR" />
    <result column="crs" property="crs" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, btc_name, short_name, serial_number
  </sql>
  <sql id="Blob_Column_List" >
    btc_brief, connection, cms, crs
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.cncf.entity.BtcExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from btc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.cncf.entity.BtcExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from btc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from btc
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from btc
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.cncf.entity.BtcExample" >
    delete from btc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.cncf.entity.BtcWithBLOBs" >
    insert into btc (id, btc_name, short_name, 
      serial_number, btc_brief, connection, 
      cms, crs)
    values (#{id,jdbcType=INTEGER}, #{btcName,jdbcType=VARCHAR}, #{shortName,jdbcType=VARCHAR}, 
      #{serialNumber,jdbcType=VARCHAR}, #{btcBrief,jdbcType=LONGVARCHAR}, #{connection,jdbcType=LONGVARCHAR}, 
      #{cms,jdbcType=LONGVARCHAR}, #{crs,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cncf.entity.BtcWithBLOBs" >
    insert into btc
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="btcName != null" >
        btc_name,
      </if>
      <if test="shortName != null" >
        short_name,
      </if>
      <if test="serialNumber != null" >
        serial_number,
      </if>
      <if test="btcBrief != null" >
        btc_brief,
      </if>
      <if test="connection != null" >
        connection,
      </if>
      <if test="cms != null" >
        cms,
      </if>
      <if test="crs != null" >
        crs,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="btcName != null" >
        #{btcName,jdbcType=VARCHAR},
      </if>
      <if test="shortName != null" >
        #{shortName,jdbcType=VARCHAR},
      </if>
      <if test="serialNumber != null" >
        #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="btcBrief != null" >
        #{btcBrief,jdbcType=LONGVARCHAR},
      </if>
      <if test="connection != null" >
        #{connection,jdbcType=LONGVARCHAR},
      </if>
      <if test="cms != null" >
        #{cms,jdbcType=LONGVARCHAR},
      </if>
      <if test="crs != null" >
        #{crs,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.cncf.entity.BtcExample" resultType="java.lang.Integer" >
    select count(*) from btc
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update btc
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.btcName != null" >
        btc_name = #{record.btcName,jdbcType=VARCHAR},
      </if>
      <if test="record.shortName != null" >
        short_name = #{record.shortName,jdbcType=VARCHAR},
      </if>
      <if test="record.serialNumber != null" >
        serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.btcBrief != null" >
        btc_brief = #{record.btcBrief,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.connection != null" >
        connection = #{record.connection,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.cms != null" >
        cms = #{record.cms,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.crs != null" >
        crs = #{record.crs,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update btc
    set id = #{record.id,jdbcType=INTEGER},
      btc_name = #{record.btcName,jdbcType=VARCHAR},
      short_name = #{record.shortName,jdbcType=VARCHAR},
      serial_number = #{record.serialNumber,jdbcType=VARCHAR},
      btc_brief = #{record.btcBrief,jdbcType=LONGVARCHAR},
      connection = #{record.connection,jdbcType=LONGVARCHAR},
      cms = #{record.cms,jdbcType=LONGVARCHAR},
      crs = #{record.crs,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update btc
    set id = #{record.id,jdbcType=INTEGER},
      btc_name = #{record.btcName,jdbcType=VARCHAR},
      short_name = #{record.shortName,jdbcType=VARCHAR},
      serial_number = #{record.serialNumber,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.cncf.entity.BtcWithBLOBs" >
    update btc
    <set >
      <if test="btcName != null" >
        btc_name = #{btcName,jdbcType=VARCHAR},
      </if>
      <if test="shortName != null" >
        short_name = #{shortName,jdbcType=VARCHAR},
      </if>
      <if test="serialNumber != null" >
        serial_number = #{serialNumber,jdbcType=VARCHAR},
      </if>
      <if test="btcBrief != null" >
        btc_brief = #{btcBrief,jdbcType=LONGVARCHAR},
      </if>
      <if test="connection != null" >
        connection = #{connection,jdbcType=LONGVARCHAR},
      </if>
      <if test="cms != null" >
        cms = #{cms,jdbcType=LONGVARCHAR},
      </if>
      <if test="crs != null" >
        crs = #{crs,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.cncf.entity.BtcWithBLOBs" >
    update btc
    set btc_name = #{btcName,jdbcType=VARCHAR},
      short_name = #{shortName,jdbcType=VARCHAR},
      serial_number = #{serialNumber,jdbcType=VARCHAR},
      btc_brief = #{btcBrief,jdbcType=LONGVARCHAR},
      connection = #{connection,jdbcType=LONGVARCHAR},
      cms = #{cms,jdbcType=LONGVARCHAR},
      crs = #{crs,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cncf.entity.Btc" >
    update btc
    set btc_name = #{btcName,jdbcType=VARCHAR},
      short_name = #{shortName,jdbcType=VARCHAR},
      serial_number = #{serialNumber,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>